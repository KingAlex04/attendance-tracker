import mongoose, { Schema, Document, Model } from 'mongoose';

export enum ReportType {
  DAILY = 'daily',
  WEEKLY = 'weekly',
  MONTHLY = 'monthly',
}

export interface IReport extends Document {
  companyId: mongoose.Types.ObjectId;
  type: ReportType;
  title: string;
  description?: string;
  startDate: Date;
  endDate: Date;
  generatedBy: mongoose.Types.ObjectId;
  fileUrl?: string;
  data: any;
  createdAt: Date;
  updatedAt: Date;
}

const ReportSchema = new Schema<IReport>(
  {
    companyId: {
      type: Schema.Types.ObjectId,
      ref: 'Company',
      required: [true, 'Company ID is required'],
    },
    type: {
      type: String,
      enum: Object.values(ReportType),
      required: [true, 'Report type is required'],
    },
    title: {
      type: String,
      required: [true, 'Title is required'],
      trim: true,
    },
    description: {
      type: String,
      trim: true,
    },
    startDate: {
      type: Date,
      required: [true, 'Start date is required'],
    },
    endDate: {
      type: Date,
      required: [true, 'End date is required'],
    },
    generatedBy: {
      type: Schema.Types.ObjectId,
      ref: 'User',
      required: [true, 'Generated by is required'],
    },
    fileUrl: {
      type: String,
      trim: true,
    },
    data: {
      type: Schema.Types.Mixed,
      required: [true, 'Report data is required'],
    },
  },
  {
    timestamps: true,
  }
);

const Report = mongoose.models.Report as Model<IReport> || mongoose.model<IReport>('Report', ReportSchema);

export default Report; 